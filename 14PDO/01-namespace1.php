<?php
/**
 * 命名空间：
 * （1）命名空间是一种封装事物的方法；例如：函数、类、方法等
 * （2）命名空间的作用：用来解决类名或应用程序名冲突问题
 * （3）举例：项目中会用到第三方类，第三方类加载进来后，可能与项目中的类名冲突
 *
 * 定义命名空间的要求：
 * （1）使用namespace关键子，来声明一个命名空间
 * （2）所有代码都可以存在于命名空间中，但是，只有三种代码会受到空间的影响：类、常量（const定义的变量）、函数
 * （3）生命命名空间的语法，是PHP脚本的第一行代码；前面有空格、空行都不行
 * （4）除了类、常量、函数代码外，其他代码可以写在空间中，但不受空间影响，其他代码相当于全局代码。
 * 全局代码可以在任何地方直接使用
 * （5）全局代码所在的空间称为“跟根空间”、“全局空间”，相当于windows系统的桌面
 * （6）命名空间是虚拟的空间
 *
 * 定义命名空间的语法格式说明（namespace SpaceName）：
 * （1）namespace是声明命名空间的关键字，不区分大小写
 * （2）SpaceName是定义的空间名称，命名方式跟类名相同
 * （3）所有代码都可以存在于命名空间中
 * （4）只有三种代码会受到空间的影响：类、常量（const定义的变量）、函数
 *
 * 定义子命名空间：
 * （1）文件夹可以有子目录的情况，命名空间也有子空间的情况
 * （2）目录的分割符号是斜杠/，空间的分割符号是反斜杠
 * （3）同一个文件可以声明多个类名空间（但是不建议这么做）
 * （4）大括号语法{}：看着更加简洁方便，但是使用{}后，声明全局变量时就不能直接
 * 写在大括号外面了（当然放在{}是可以的）
 * （5）匿名空间：namespace{}生命的没有名字的空间，这里面的变量都是全局的，解决{}语法定义全局空间的问题
 *
 *
 *
 */
 namespace App{
   // 学生类
   class Student {
     private $name = '文君';
     public function __construct()
     {
       echo "我的名字叫：{$this->name}";
     }
   }
   // 函数
   function showInfo () {
     echo "我要赚大钱";
   }
  // 定义一个局部常量
   const DB_HOST = 'localhost';
   // 魔术常量__NAMESPACE__构建类名 "App\Student"
   $className = __NAMESPACE__."Student";
   $obj = new $className();
 }

